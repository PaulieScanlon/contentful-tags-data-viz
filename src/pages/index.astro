---
import { contentfulClient } from '../lib/contentful';

import { findMaxValue } from '../utils/find-max-value';
import { createTagCounts } from '../utils/create-tag-counts';
import { createLineChartPoints } from '../utils/create-line-chart-points';
import { createChartDates } from '../utils/create-chart-dates';
import { createChartValues } from '../utils/create-chart-values';
import { createXAxis } from '../utils/create-x-axis';
import { createYAxis } from '../utils/create-y-axis';
import { createChartGuides } from '../utils/create-chart-guides';

import { materialColorsFlat } from '../utils/material-colors';

const tags = await contentfulClient.getEntries({
  content_type: 'blogPost',
});

const tagCounts = createTagCounts(tags.items);
const maxValue = findMaxValue(tagCounts);
const guides = [...Array(8).keys()];

const fontSize = 20;
const chartWidth = 1920;
const chartHeight = 1080;
const paddingL = 120;
const paddingR = 70;
const paddingTop = 200;
const paddingBottom = 150;

const filterData = (data, includeValues) => {
  if (!includeValues || includeValues.length === 0) {
    return data;
  }

  return data.filter((item) => includeValues.includes(item.id));
};

const selectedValues = ['astro', 'next-js', 'gatsby'];

const allData = tagCounts.map((data, index) => {
  const { name, total } = data;

  return {
    id: name.replace(/[^\w\d]/g, '-').toLowerCase(),
    name: name,
    total: total,
    color: materialColorsFlat[index],
    points: createLineChartPoints(
      data.years,
      chartWidth,
      chartHeight,
      maxValue,
      paddingL,
      paddingR,
      paddingTop,
      paddingBottom
    ).toString(),
  };
});

const chartXAxis = createXAxis(createChartDates(tagCounts[0].years), chartWidth, chartHeight, paddingL, paddingR, 100);
const chartYAxis = createYAxis(createChartValues(0, maxValue), chartHeight, 60, paddingTop, paddingBottom);
const chartGuides = createChartGuides(guides, chartWidth, chartHeight, paddingL, paddingR, paddingTop, paddingBottom);

const chartData = filterData(allData, selectedValues);
---

<html>
  <body>
    <main>
      <svg xmlns='http://www.w3.org/2000/svg' viewBox={`0 0 ${chartWidth} ${chartHeight}`} class='bg-gray-100'>
        {
          chartGuides.map((data) => {
            const { x, y, width } = data;
            return <rect x={x} y={y} width={width} height={2} class='fill-gray-200' />;
          })
        }

        {
          chartData.map((data) => {
            const { id, color, points } = data;
            return (
              <polyline
                id={`${id}-polyline`}
                points={points}
                style={{
                  fill: 'none',
                  strokeWidth: 3,
                  stroke: color,
                }}
              />
            );
          })
        }

        {
          chartXAxis.map((data) => {
            const { date, x, y } = data;
            return (
              <text
                x={x + fontSize / 2}
                y={y}
                text-anchor='start'
                class='fill-gray-400'
                style={{
                  fontSize: fontSize,
                  transform: 'rotate(90deg)',
                  transformBox: 'content-box',
                }}
              >
                {date}
              </text>
            );
          })
        }

        {
          chartYAxis.map((data) => {
            const { value, x, y } = data;

            return (
              <text
                x={x}
                y={y + fontSize / 2}
                text-anchor='start'
                class='fill-gray-400'
                style={{
                  fontSize: fontSize,
                }}
              >
                {value}
              </text>
            );
          })
        }
      </svg>
    </main>
  </body>
</html>
