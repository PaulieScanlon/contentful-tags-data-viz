---
import { contentfulClient } from '../lib/contentful';

import Main from '../layouts/main.astro';

import { createTimeSeries } from '../utils/create-time-series';
import { createLineChartPoints } from '../utils/create-line-chart-points';
import { getDateRange } from '../utils/get-date-range';
import { createChartValues } from '../utils/create-chart-values';
import { createXAxis } from '../utils/create-x-axis';
import { createYAxis } from '../utils/create-y-axis';
import { createChartGuides } from '../utils/create-chart-guides';
import { findMaxValue } from '../utils/find-max-value';
import { materialColorsFlat } from '../utils/material-colors';

const tags = await contentfulClient.getEntries({
  content_type: 'blogPost',
});

const timeSeries = createTimeSeries(tags.items);
const maxValue = findMaxValue(timeSeries);
const dateRange = getDateRange(timeSeries[0].years);
const dateStart = dateRange[0];
const dateEnd = dateRange[dateRange.length - 1];

const fontSize = 20;
const chartWidth = 1920;
const chartHeight = 1080;
const paddingL = 120;
const paddingR = 70;
const paddingTop = 220;
const paddingBottom = 180;


const chartData = timeSeries
  .map((data, index) => {
    const { name, total } = data;

    return {
      id: name.replace(/[^\w\d]/g, '-').toLowerCase(),
      name: name,
      total: total,
      color: materialColorsFlat[index],
      points: createLineChartPoints(
        data.years,
        chartWidth,
        chartHeight,
        maxValue,
        paddingL,
        paddingR,
        paddingTop,
        paddingBottom
      )
    };
  })
  .sort((a, b) => b.total - a.total);
const chartXAxis = createXAxis(dateRange, chartWidth, chartHeight, paddingL, paddingR, 120);
const chartYAxis = createYAxis(createChartValues(0, maxValue), chartHeight, 60, paddingTop, paddingBottom);
const chartGuides = createChartGuides( [...Array(8).keys()], chartWidth, chartHeight, paddingL, paddingR, paddingTop, paddingBottom);
---
<script>
   document.querySelectorAll('.polyline').forEach((polyline) => {  
      polyline.style.display = 'none'
   })

    const selectedValues = ['gatsby', 'next-js', 'astro', 'remix']

    selectedValues.forEach((value) =>{
        document.getElementById(`${value}-checkbox`).setAttribute('checked', 'true')
        document.getElementById(`${value}-polyline`).style.display = 'block'
        document.getElementById(`${value}-chip`).style.backgroundColor =  document.getElementById(`${value}-checkbox`).getAttribute('data-color')
    })


   document.querySelectorAll('.checkbox').forEach((checkbox) => {
    checkbox.addEventListener('change' , (event) => {
    const {target, target: {value, checked}} = event

        if(checked) {
            document.getElementById(`${value}-polyline`).style.display = 'block'
            document.getElementById(`${value}-chip`).style.backgroundColor =  target.getAttribute('data-color')
        }else {
            document.getElementById(`${value}-polyline`).style.display = 'none'
            document.getElementById(`${value}-chip`).style.backgroundColor =  ''
        }

    })
   })
</script>
<Main>
  <div class='relative flex flex-col sm:flex-row'>
    <aside class='sm:fixed sm:w-72 h-96 sm:h-screen shadow-lg overflow-scroll'>
      <div class='pl-4 pr-6 pb-8'>
        <div class='pt-6'>
          <img alt='Contentful Logo' src='/contentful-logo.svg' class='w-32' />
        </div>
        <hr class='my-4' />
        <ul class='flex flex-col gap-1'>
          {chartData.map((item) => {
            const { id, color, name, total } = item;
          
            return (
              <link class='p-2 transition-colors duration-300 hover:bg-gray-100'>
                <label class='flex gap-2 items-center text-xs cursor-pointer'>
                  <input
                    id={`${id}-checkbox`}
                    type='checkbox'
                    value={id}
                    class='checkbox cursor-pointer'
                    data-color={color}
                  />
                  <div class='flex items-center justify-between w-full'>
                    <span class='font-medium select-none'>{name}</span>
                    <span
                      id={`${id}-chip`}
                      class='flex items-center justify-center text-white rounded-full w-5 h-5 bg-gray-200'
                    >
                      {total}
                    </span>
                  </div>
                </label>
              </li>
            );
          })}
        </ul>
      </div>
    </aside>
    <section class='sm:ml-72 w-full h-full sm:min-h-screen bg-gray-50'>
      <div class='p-8'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          viewBox={`0 0 ${chartWidth} ${chartHeight}`}
          class='bg-white shadow max-w-6xl'
        >

          {chartGuides.map((data) => {
            const { x, y, width } = data;
            return <rect  x={x} y={y} width={width} height={2} class='fill-gray-200' />;
          })}

          {chartData.map((data) => {
            const { id, color, points } = data;

            return (
              <g>
                <linearGradient id={`${id}-fill-gradient`} x1='0%' y1='0%' x2='0%' y2='100%'>
                  <stop offset='50%' stop-color={color} stop-opacity={0.1} />
                  <stop offset='100%' stop-color={color} stop-opacity='0' />
                </linearGradient>
                <polyline
                id={`${id}-polyline`}
                class="polyline"
                points={points}
                style={{
                  fill: `url(#${id}-fill-gradient)`,
                  fillOpacity: 1,
                  strokeWidth: 3,
                  stroke: color,
                }}
                />
                </g>
            );
          })}

          {chartXAxis.map((data) => {
            const { date, x, y } = data;
            return (
              <text
                
                x={x + fontSize / 2}
                y={y}
                text-anchor='start'
                class='fill-gray-400'
                style={{
                  fontSize: fontSize,
                  transform: 'rotate(90deg)',
                  transformBox: 'content-box',
                }}
              >
                {date}
              </text>
            );
          })}

          {chartYAxis.map((data) => {
            const { value, x, y } = data;

            return (
              <text
              
                x={x}
                y={y + fontSize / 2}
                text-anchor='start'
                class='fill-gray-400'
                style={{
                  fontSize: fontSize,
                }}
              >
                {value}
              </text>
            );
          })}

          <text
            x={paddingL}
            y={110}
            text-anchor='start'
            class='fill-gray-600 font-bold'
            style={{
              fontSize: 60,
            }}
          >
            Tags Usage
          </text>
          <text
            x={paddingL}
            y={160}
            text-anchor='start'
            class='fill-gray-600'
            style={{
              fontSize: 30,
            }}
          >
            https://paulie.dev
          </text>
          <text
            x={chartWidth - paddingR}
            y={160}
            text-anchor='end'
            class='fill-gray-600'
            style={{
              fontSize: 30,
            }}
          >
            <tspan>{`${dateStart.month}, ${dateStart.year}`}</tspan>
            <tspan>{` - ${dateEnd.month}, ${dateEnd.year}`}</tspan>
          </text>
        </svg>
      </div>
    </section>

    </div>
</Main>
../utils/get-date-range